rm(Age)
rm(alex)
rm(B)
rm(bankloan)
rm(fileName)
rm(github_token)
ls()
rm(con)
rm(crs)
rm(df2)
rm(dfa)
rm(df)
rm(f)
rm(token)
rm(gtoken)
ls()
rm(diag)
rm(Height)
rm(*)
lapply(ls(),rm)
lapply(ls,rm)
x <- ls()
lapply(x,rm)
x
?lapply
lapply(x,rm,SIMPLIFY=T,USE.NAMES=T)
names(x)
class(x)
typeof(x)
lapply(x[1:13],rm,SIMPLIFY=T,USE.NAMES=T)
class(as.list(x))
lapply(as.lis(x),rm)
lapply(as.list(x),rm)
for (i in X) print(X[i])
x[1]
for (i in x) print(x[i])
x
x[1]
for (i in x) print(i)
for (i in x) rm(i)
ls()
lapply(x,rm)
lapply(x,rm())
lapply(x,rm)
rm(telco)
for (i in x) rm(i)
for (i in x) print(i)
for (i in x) print(names(i)
)
for (i in x) print(as.object(i))
rm(list=ls())
ls()
library(xlsx)
getwd()
rest <- read.xlsx("BaltimoreRest.xlsx")
rest <- read.xlsx("BaltimoreRest.xlsx",sheetIndex = 1)
rest <- read.xlsx2("BaltimoreRest.xlsx",sheetIndex = 1)
rest <- read.csv("Restaurants.csv")
rest
rest
summary(rest)
table(rest$zipCode = "21212")
table(rest$zipCode %in% "21212")
t <- table(rest$zipCode %in% "21212")
rest[t]
rest[t,]
rest[t,]
rest(rest$zipCode %in% "21212")
rest[rest$zipCode %in% "21212"]
rest[rest$zipCode %in% c("21212")]
rest[rest$zipCode %in% c("21212"),]
rest[rest$zipCode %in% "21212",]
t
data("UCBAdmissions")
DF = as.data.frame(UCBAdmissions)
summary(DF)
df
DF
xt <- xtabs(Freq ~.,data=DF)
xt
ftable(xt)
rest$nearMe = rest$neighborhood %in% c("Roland Park","Homeland")
rest
table(rest$nearMe)
sapply(rest,class)
mtcars
nrow(mtcars)
mtcars$carname <- rowname(mtcars)
mtcars$carname <- rownames(mtcars)
mtcars
carmelt <- melt(mtcars,id=c("carname","gear","cyl"), measure.vars=("mpg","hpg"))
carmelt <- melt(mtcars,id=c("carname","gear","cyl"), measure.vars=c("mpg","hpg"))
library(plyr)
carmelt <- melt(mtcars,id=c("carname","gear","cyl"), measure.vars=c("mpg","hpg"))
library(reshape2)
install.packages("stringi")
library(reshape2)
carmelt <- melt(mtcars,id=c("carname","gear","cyl"), measure.vars=c("mpg","hpg"))
carmelt <- melt(mtcars,id=c("carname","gear","cyl"), measure.vars=c("mpg","hp"))
carmelt
cylData <- dcast(carmelt, cyl ~ variables)
cylData <- dcast(carmelt, cyl ~ variable)
cylData
cylData <- dcast(carmelt, cyl ~ variable,mean())
cylData <- dcast(carmelt, cyl ~ variable,mean
)
cylData
cylData <- dcast(carmelt, cyl ~ variable,c("mean","max"))
cylData <- dcast(carmelt, cyl ~ variable,mean,max)
ddply(InsectSprays,.(spray),summarize,totaal=sum(count()))
ddply(InsectSprays,.(spray),summarize,totaal=sum(count))
pop=read.csv("http://2010.census.gov/2010census/data/pop_density.csv",skip=3)
pop=read.csv("https://2010.census.gov/2010census/data/pop_density.csv",skip=3)
pop=read.csv('https://2010.census.gov/2010census/data/pop_density.csv',skip=3)
pop=read.csv("pop_density.csv",skip=3)
pop
pop=read.csv("pop_density.csv")
pop
summary(pop)
colnames(pop) = c("state", seq(1910, 2010,10))
pop
library(doBy)
top=orderBy(~-2010,pop)
top
top = subset(top, state != "United States")
top
top =head(top,10)
top
top$state = factor(top$%state)
top$state = factor(top$state)
top
sapply(pop,class)
mtop=melt(top,id.vars="state", variable.name = "year", value.name = "population")
mtop
library(ggplot2)
ggplot(data=mtop, aes(group=state)) + geom_line(aes(x=year,y=population,color=state))
library(digest)
install.packages("digest")
library(digest)
ggplot(data=mtop, aes(group=state)) + geom_line(aes(x=year,y=population,color=state))
dcast(mtop,state~year,value.var = "population")
pop=read.csv('https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv')
summary(pop)
library(dplyr)
agricultureLogical <- filter(pop,ACR == 3 & AGS == 6)
nrow(pop)
nrow(agricultureLogical)
which(agricultureLogical)
agricultureLogical <- table(filter(pop,ACR == 3 & AGS == 6))
which(agricultureLogical)
agricultureLogical
summary(agricultureLogical)
agricultureLogical <- table(pop$ACR == 3 & pop$AGS == 6))
agricultureLogical <- table(pop$ACR == 3 & pop$AGS == 6)
summary(agricultureLogical)
which(agricultureLogical)
class(agricultureLogical)
agricultureLogical
agricultureLogical <- with(subset(pop,type ==1 & ACR == 3 & AGS == 6)
)
agricultureLogical <- with(subset(pop,Type1Font() ==1 & ACR == 3 & AGS == 6))
agricultureLogical <- with(subset(pop,TyPE ==1 & ACR == 3 & AGS == 6))
agricultureLogical <- with(subset(pop,TYPE ==1 & ACR == 3 & AGS == 6))
agricultureLogical <- with(subset(pop,pop[TYPE ==1 & ACR == 3 & AGS == 6,]))
agricultureLogical <- with(pop,pop[TYPE ==1 & ACR == 3 & AGS == 6,])
agricultureLogical
which(agricultureLogical)
agricultureLogical <- which(with(pop,pop[TYPE ==1 & ACR == 3 & AGS == 6,]))
agricultureLogical <- filter(pop,ACR == 3 & AGS == 6)
which(agricultureLogical
)
agricultureLogical
which(with(pop, TYPE == 1 & ACS == 3 & AGS == 6))
which(with(pop, TYPE == 1 & ACR == 3 & AGS == 6))
?with
?which
View(agricultureLogical)
View(agricultureLogical)
agricultureLogical <- with(pop, TYPE == 1 & ACR == 3 & AGS == 6)
which(agricultureLogical)
View(mtcars)
View(pop)
View(pop)
View(pop)
View(pop)
pop[which(agricultureLogical)]
pop[which(agricultureLogical),]
library(jpeg)
install.libraries(jpeg)
install.packages(jpeg)
install.packages("jpeg")
library(jpeg)
?jpeg
jpeg("https://d396qusza40orc.cloudfront.net/getdata%2Fjeff.jpg")
jpeg("getdata%2Fjeff.jpg")
jpeg("getdata jeff.jpg")
pict <- jpeg("getdata jeff.jpg")
summary(pict)
pict
pict <- jpeg("getdata jeff.jpg",native=T)
pict <- jpeg("getdata jeff.jpg",native=TRUE)
pict <- readJPEG("https://d396qusza40orc.cloudfront.net/getdata%2Fjeff.jpg",native = TRUE)
pict <- readJPEG("getdata jeff.jpg",native = TRUE)
pict <- readJPEG("https://d396qusza40orc.cloudfront.net/getdata%2Fjeff.jpg",native = TRUE)
pict <- readJPEG("http://d396qusza40orc.cloudfront.net/getdata%2Fjeff.jpg",native = TRUE)
pict <- readJPEG("getdata jeff2.jpg",native = TRUE)
pict
quantile(pict,probs=c(0.3,0.8,0.9))
GDP=read.csv("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FGDP.csv")
summary(GDP)
EDU <- read.csv("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FEDSTATS_Country.csv")
merged <- merge(x=GDP,y=EDU,by.x=X, by.y=CountryCode)
merged <- merge(x=GDP,y=EDU,by.x="X", by.y="CountryCode")
summary(merged)
nrow(merged)
merged <- merge(x=GDP,y=EDU,by.x="X", by.y="CountryCode",all=T)
nrow(merged)
merged <- merge(x=GDP,y=EDU,by.x="X", by.y="CountryCode")
View(GDP)
View(EDU)
nrow(merged)
View(merged)
merged <- merge(x=GDP,y=EDU,by.x="X", by.y="CountryCode",all=T)
nrow(merged)
View(GDP)
merged <- merge(x=GDP,y=EDU,by.x="X", by.y="CountryCode",all=T)
merged <- merge(x=GDP,y=EDU,by.x="X", by.y="CountryCode")
EDU <- read.csv("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FEDSTATS_Country.csv",skip=3)
EDU <- read.csv("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FEDSTATS_Country.csv",header = F)
EDU <- read.csv("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FEDSTATS_Country.csv")
GDP=read.csv("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FGDP.csv",skip=2)
GDP=read.csv("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FGDP.csv",skip=3)
GDPranked=subset(GDP,GDP[is.na(GDP$Ranking),])
GDPranked=subset(GDP,is.na(GDP$Ranking))
View(GDPranked)
GDPranked=subset(GDP,is.na(Ranking))
View(GDPranked)
GDPranked=subset(GDP,!is.na(Ranking))
View(GDPranked)
GDPranked=subset(GDP,is.numeric(Ranking))
View(GDPranked)
GDPranked=subset(GDP,Ranking>=1 & Ranking<=190))
GDPranked=subset(GDP,Ranking>=1 & Ranking<=190)
GDPranked=subset(GDP,unfactor(Ranking)>=1 & unfactor(Ranking)<=190)
GDPranked=subset(GDP,Ranking !=" ")
View(GDPranked)
GDPranked=subset(GDP,!is.na(Ranking))
GDPranked=subset(GDP,!is.na(as.numeric(Ranking))
)
GDPranked=GDP[!is.na(as.numeric(Ranking)),]
GDPranked=GDP[!is.na(as.numeric("Ranking")),]
GDPranked=GDP[as.numeric("Ranking")>0 & as.numeric("Ranking")<191,]
GDPranked=GDP["Ranking">0 & "Ranking"<191,]
as.numeric(GDP$Ranking)
GDPranked=GDP
GDPranked$Ranking=droplevels(GDPranked$Ranking)
GDPranked = GDPranked["Ranking">0 & "Ranking"<191]
GDPranked=GDP
GDPranked$Ranking=droplevels(GDPranked$Ranking)
GDPranked = GDPranked["Ranking">0 & "Ranking"<191,]
GDPranked=GDP
GDPranked$Ranking=droplevels(GDPranked$Ranking)
GDPranked = GDPranked["Ranking">"0" & "Ranking"<"191",]
GDPranked=GDP
GDPranked$Ranking=droplevels(GDPranked$Ranking)
View(GDPranked)
GDPranked <- GDP
GDPranked$Ranking <- droplevels(GDPranked$Ranking)
View(GDPranked)
View(GDPranked)
GDPranked <- GDP
GDPranked$Ranking <- as.numeric(as.character(GDPranked$Ranking))
GDPranked <- GDPranked[!is.na("Ranking"),]
GDPranked[!is.na("Ranking"),]
GDPranked[which("Ranking")>0 & which("Ranking")<191,]
GDPranked[which("GDPranked$Ranking")>0 & which("GDPranked$Ranking")<191,]
GDPranked[which("Ranking">0) & which("Ranking"<191),]
sapply(GDPranked,class)
GDPranked[which(Ranking>0) & which(Ranking<191),]
GDPranked[which(GDPranked$Ranking>0) & which(GDPranked$Ranking<191),]
GDPranked[which(GDPranked$Ranking>0),]
GDPranked <- GDPranked[which(GDPranked$Ranking>0),]
merged <- merge(x=GDPranked,y=EDU,by.x="X", by.y="CountryCode")
View(merged)
head(merged[merged$Ranking,],15)
head(merged[order(merged$Ranking),],15)
mean(merged[merged$Income.Group=="High income: OECD"])
mean(merged[merged$Income.Group="High income: OECD"])
mean(merged[merged$Income.Group=="High income: OECD"],merged$US.dollars.)
mean(merged[merged$Income.Group=="High income: OECD"],"merged$US.dollars.")
mean(merged[merged$Income.Group=="High income: OECD"]$merged$US.dollars.)
merged[merged$Income.Group=="High income: OECD"]$merged$US.dollars.
mean(merged["merged$Income.Group"=="High income: OECD"],"merged$US.dollars.")
mean(merged["merged$Income.Group"=="High income: OECD"],as.numeric("merged$US.dollars."))
mean(merged["merged$Income.Group"=="High income: OECD"],as.numeric(as.character("merged$US.dollars.")))
mean(merged["merged$Income.Group"=="High income: OECD"],as.numeric(as.character("merged$US.dollars.")),na.rm=T)
mean(as.numeric(as.character(merged["merged$Income.Group"=="High income: OECD"]$merged$US.dollars.)))
mean(as.numeric(as.character(merged["merged$Income.Group"=="High income: OECD"]$merged$US.dollars.)),na.rm=T)
as.numeric(as.character(merged["merged$Income.Group"=="High income: OECD"]$merged$US.dollars.))
merged["merged$Income.Group"=="High income: OECD"]$merged$US.dollars.
merged[merged$Income.Group=="High income: OECD"]$merged$US.dollars.
merged[merged$Income.Group=="High income: OECD"]$merged$US.dollars.
merged["merged$Income.Group"=="High income: OECD",]$merged$US.dollars.
merged["merged$Income.Group"=="High income: OECD",]
merged["merged$Income.Group" %in% "High income: OECD",]$merged$US.dollars.
merged["merged$Income.Group" %in% "High income: OECD",]
merged["merged$Income.Group" %in% c("High income: OECD"),]
merged["merged$Income.Group" %in% c("Low income"),]
merged
merged$Income.Group
merged[which(merged$Income.Group=="High income: nonOECD")]
colnames(merged)
merged[which("merged$Income.Group"=="High income: nonOECD")]
merged[which("merged$Income.Group"=="High income: nonOECD"),]
dt[, mean(merged, na.rm = TRUE), by = Income.Group]
merged[, mean("US.dollars.", na.rm = TRUE), by = Income.Group]
merged[, mean("US.dollars.", na.rm = TRUE), by = "Income.Group"]
merged[, mean("US.dollars.", na.rm = TRUE), by = merged$Income.Group]
merged[merged$Income.Group=="High income: OECD", mean("US.dollars.", na.rm = TRUE)]
merged[merged$Income.Group=="High income: OECD", mean(as.numeric("US.dollars."), na.rm = TRUE)]
merged[merged$Income.Group=="High income: OECD", mean(as.numeric(as.character("US.dollars.")), na.rm = TRUE)]
merged[merged$Income.Group=="High income: OECD", "US.dollars."]
mean(merged[merged$Income.Group=="High income: OECD", "US.dollars."])
mean(as.numeric(merged[merged$Income.Group=="High income: OECD", "US.dollars."]))
mean(as.numeric(merged[merged$Income.Group=="High income: nonOECD", "US.dollars."]))
mean(as.numeric(merged[merged$Income.Group=="High income: OECD", "Ranking"]))
mean(as.numeric(merged[merged$Income.Group=="High income: nonOECD", "Ranking"]))
mean(as.numeric(merged[merged$Income.Group=="High income: nonOECD", "Ranking"]))
View(GDP)
View(EDU)
View(merged)
quantile(merged$Ranking,probs=c(0.2,0.4,0.6,0.8,1))
table(quantile(merged$Ranking,probs=c(0.2,0.4,0.6,0.8,1)),merged$Income.Group)
table(merged$Ranking,merged$Income.Group)
merged$Qrank <- cut(merged$Ranking,breaks=5)
merged2 <- merged[,c(merged$Ranking,merged$US.dollars.,merged$Income.Group,merged$Qrank]
merged2 <- merged[,c(merged$Ranking,merged$US.dollars.,merged$Income.Group,merged$Qrank)]
merged2 <- merged[,merged$Ranking,merged$US.dollars.,merged$Income.Group,merged$Qrank]
merged2 <- data.frame(merged$Ranking,merged$US.dollars.,merged$Income.Group,merged$Qrank)
merged2
merged2[order(merged2$merged.Ranking)]
merged2[order(merged2$merged.Ranking),]
savehistory("D:/Onedrive/Welling ITC/Opleiding/Coursera/Data Science/3 - Getting & cleaning data/history.Rhistory")
housing <- read.csv("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv")
View(housing)
View(housing)
Lhouse <- with(housing,TYPE==1 & ACR==3 & AGS==6)
housing[Lhouse,]
which(Lhouse)
housing[which(Lhouse),]
rm(list-ls())
rm(list=ls())
install.packages("jpeg")
library(jpeg)
pict <- readJPEG("https://d396qusza40orc.cloudfront.net/getdata%2Fjeff.jpg",native=TRUE)
url <- "https://d396qusza40orc.cloudfront.net/getdata%2Fjeff.jpg"
f <- file.path(getwd(), "jeff.jpg")
download.file(url, f, mode = "wb")
img <- readJPEG(f, native = TRUE)
quantile(img,probs=c(0.3,0.8))
rm(list=ls())
gdp <- read.cvs("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FGDP.csv")
gdp <- read.csv("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FGDP.csv")
gdp <- gdp[gdp$X != "",]
gdp <- gdp[gdp$X != "" & gdp$Gross.domestic.product.2012 != "",]
View(gdp)
View(gdp)
gdp <- data.frame(X=gdp$X,Name=gdp$X.2,Ranking=gdp$Gross.domestic.product.2012,GDP=gdp$X.3
)
gdp$Ranking <- as.numeric(as.character(gdp$Ranking))
View(gdp)
gdp <- gdp[order(-Ranking)]
gdp <- gdp[order(-gdp$Ranking)]
gdp <- gdp[order(-gdp$Ranking),]
ed <- read.csv("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FEDSTATS_Country.csv")
ed <- data.frame(Code=ed$CountryCode,edName=ed$Long.Name,Group=ed$Income.Group)
head(merge(gdp,ed,X,Code),15)
head(merge(gdp,ed,by.x=X,by.y=Code),15)
head(merge(gdp,ed,"X","Code"),15)
head(merge(gdp,ed,by.x="X",by.y="Code"),15)
head(order(merge(gdp,ed,by.x="X",by.y="Code"),-Ranking),15)
head(order(merge(gdp,ed,by.x="X",by.y="Code"),-gdp$Ranking),15)
head(merge(gdp,ed,by.x="X",by.y="Code")[order(-gdp$Ranking),],15)
head(merge(gdp,ed,by.x="X",by.y="Code")[order(-gdp$Ranking),],15)
head(merge(gdp,ed,by.x="X",by.y="Code")[order(-gdp$Ranking),],15)
head(merge(gdp,ed,by.x="X",by.y="Code")[order(-Ranking),],15)
head(merge(gdp,ed,by.x="X",by.y="Code"),15)
library(plyr)
head(arrange(merge(gdp,ed,by.x="X",by.y="Code"),-Ranking),15)
head(merge(gdp,ed,by.x="X",by.y="Code")[order(-gdp$Ranking),],15)
head(merge(gdp,ed,by.x="X",by.y="Code")[order(gdp$Ranking),],15)
head(merge(gdp,ed,by.x="X",by.y="Code")[order(gdp$Ranking),X:Name],15)
head(merge(gdp,ed,by.x="X",by.y="Code")[order(gdp$Ranking),gdp$X:gdp$Name],15)
head(merge(gdp[order(-gdp$Ranking),],ed,by.x="X",by.y="Code"),15)
head(merge(gdp,ed,by.x="X",by.y="Code"),15)
head(merge(gdp,ed,by.x="X",by.y="Code"),15)
x<-merge(gdp,ed,by.x="X",by.y="Code")
head(x[order(-x$Ranking),],15)
View(x)
rm(x)
nrow(arrange(merge(gdp,ed,by.x="X",by.y="Code"),-Ranking))
gdped <- arrange(merge(gdp,ed,by.x="X",by.y="Code"),-Ranking)
View(gdped)
View(gdped)
gdpmelt <- melt(gdped,id=c("X","Name","Group"),measure.vars=c("Ranking"))
library(reshape2)
gdpmelt <- melt(gdped,id=c("X","Name","Group"),measure.vars=c("Ranking"))
View(gdpmelt)
View(gdpmelt)
dcast(gdpmelt,Group ~ variable,mean())
dcast(gdpmelt,Group ~ variable,mean
)
gdped$q <- quantile(gdped$Ranking,g=5)
library(Hmisc)
gdped$q <- cut2(gdped$Ranking,g=5)
table(gdped$q,gdped$Group)
table(gdped$q)
gdped$qgdp <- cut2(gdped$GDP,g=5)
gdped$GDP <- as.numeric(as.character(gdped$GDP))
library(stringi)
library(stringr)
library(string)
install.packages("SparkR")
library(SparkR)
capitalize("this_is_a_test")
capitalize("gsub(this_is_a_test","_",)
capitalize("gsub(this_is_a_test","_",))
capitalize("gsub(this_is_a_test","_","")
capitalize("gsub(this_is_a_test","_",""))
capitalize(gsub(this_is_a_test","_",""))
capitalize(gsub("this_is_a_test","_",""))
capitalize(gsub("_","","this_is_a_test"))
capitalize(gsub("_"," ","this_is_a_test"))
str_to_title(gsub("_"," ","this_is_a_test"))
str_to_upper(gsub("_"," ","this_is_a_test"))
gsub(" ","",str_to_title(gsub("_"," ","this_is_a_test"))
)
Sys.timezone()
x <- dmy("12jan64")
install.packages("lubridate")
library(lubridate)
x <- dmy("12jan64")
x
house <- read.csv("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv")
head(house)
strsplit(names(house),"wgtp")
gdp$GDP <- as.character(gdp$GDP)
gdp$GDP <- gsub(","",gdp$GDP)
)
)
" "
gdp$GDP <- gsub("","",gdp$GDP)
gdp$GDP <- gsub(",","",gdp$GDP)
gdp$GDP
mean(gdp$GDP)
mean(as.numeric(gdp$GDP)
)
grep("^United",countryNames)
grep("^United",countryNames)
grep("^United",gdp$Name)
gdp$Name[92]
gdp$Name[92] <- "Cote d'Ivoire"
grep("^United",as.character(gdp$Name))
fedstat <- read.csv("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FEDSTATS_Country.csv")
View(fedstat)
View(fedstat)
ed2 <- read.csv("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FEDSTATS_Country.csv")
GDP2=read.csv("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FGDP.csv")
View(GDP2)
View(GDP2)
View(fedstat)
nrow(fedstat[grep("Fiscal year end: June",fedstat$Special.Notes),])
library(quantmod)
amzn = getSymbols("AMZN",auto.assign=FALSE)
sampleTimes = index(amzn)
install.packages("quantmod")
library(quantmod)
amzn = getSymbols("AMZN",auto.assign=FALSE)
sampleTimes = index(amzn)
head(sampleTimes)
head(sampleTimes,30)
library(lubridate)
year(sampleTimes)
with(year(sampleTimes)==2012)
year <- year(sampleTimes)
with(year,year==2012)
class(year)
with(year[]==2012)
count(year, break=year)
count(year, break==year)
year <- as.data.frame(year)
year$year <- as.factor(year$year)
summary(year)
View(year)
View(year)
table(year)
x <- data.frame(year=year(sampleTimes),date=sampleTimes)
View(x)
View(x)
table(x$year,wday(x$date))
table(x$year,wday(x$date,label=T))
savehistory("~/OneDrive/Welling ITC/Opleiding/Coursera/Data Science/3 - Getting & cleaning data/history.Rhistory")
# Create the third plot: lineplot of submetering (3) per timestamp
png(filename = "plot3.png",width = 480,height = 480)
plot(hpc$DateTime, hpc$Sub_metering_1, xlab = "", ylab = "Energy sub metering", type = "l")
points(hpc$DateTime, hpc$Sub_metering_2, type = "l", col="red")
points(hpc$DateTime, hpc$Sub_metering_3, type = "l", col="blue")
legend("topright",c("Sub_metering_1","Sub_metering_2","Sub_metering_3"),lty=c(1,1,1),col=c("black","red","blue"))
dev.off()
setwd("~/Documents/Git/ExData_Plotting1")
rm(list=ls())
source("Script.R")
